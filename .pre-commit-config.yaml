---
# Pre-commit hooks for Go MCP server projects
# Provides comprehensive code quality checks optimized for Go development

default_language_version:
  python: python3
default_install_hook_types:
  - pre-commit
  - commit-msg

repos:
  # General file hygiene and security
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        name: "✂️ trailing-whitespace · Remove unnecessary spaces"
      - id: end-of-file-fixer
        name: "📄 end-of-file-fixer · Ensure files end with newline"
      - id: check-yaml
        name: "📝 check-yaml · Validate YAML syntax"
        args: ["--allow-multiple-documents"]
      - id: check-json
        name: "📋 check-json · Validate JSON syntax"
      - id: check-toml
        name: "⚙️ check-toml · Validate TOML syntax"
      - id: check-merge-conflict
        name: "⚔️ check-merge-conflict · Detect merge conflict markers"
      - id: check-added-large-files
        name: "📦 check-added-large-files · Prevent large file commits"
        args: ["--maxkb=500"]
      - id: detect-private-key
        name: "🔑 detect-private-key · Prevent private key exposure"
      - id: mixed-line-ending
        name: "🔧 mixed-line-ending · Standardize line endings"
        args: ["--fix=lf"]
      - id: check-case-conflict
        name: "🔤 check-case-conflict · Detect case-insensitive conflicts"
      - id: check-executables-have-shebangs
        name: "🏃 check-executables-have-shebangs · Ensure scripts have shebangs"
      - id: check-shebang-scripts-are-executable
        name: "✔️ check-shebang-scripts-are-executable · Verify script permissions"

  # Go-specific formatting and linting
  - repo: https://github.com/TekWizely/pre-commit-golang
    rev: v1.0.0-rc.1
    hooks:
      # Formatting
      - id: go-fmt-repo
        name: "🔍 go-fmt · Format Golang code"
      - id: go-fumpt-repo # Stricter gofmt
        name: "🔍 go-fmt · Format Golang code (Stricter)"
      - id: go-imports-repo # Organize imports
        name: "🔍 go-fmt · Organize imports"

      # Module maintenance
      - id: go-mod-tidy-repo
        name: "📚 go-mod-tidy · Clean up module dependencies"
      - id: go-mod-verify-repo
        name: "✅ go-mod-verify · Verify module checksums"

      # Building and testing
      - id: go-build-repo-mod
        name: "🔨 go-build · Compile Go code"
      - id: go-test-repo-mod
        name: "🧪 go-test · Run Go tests"
        args: ["-v", "-race", "-timeout=5m"]

      # Static analysis
      - id: go-vet-repo-mod
        name: "🔍 go-vet · Examine Go code for issues"
      - id: go-sec-repo-mod # Security scanning
        name: "🛡️ go-sec · Security vulnerability scan"
      - id: go-staticcheck-repo-mod
        name: "🔬 go-staticcheck · Advanced static analysis"

      # Cyclomatic complexity check
      - id: go-cyclo-repo-mod
        name: "📊 go-cyclo · Check code complexity"
        args: ["-over=15"]

      # Ensure no //go:build ignore tags
      - id: go-no-build-ignored-files
        name: "🚫 go-no-build-ignored · Prevent ignored build files"

  # Comprehensive linting with golangci-lint
  - repo: https://github.com/golangci/golangci-lint
    rev: v1.59.1
    hooks:
      - id: golangci-lint
        name: "🎯 golangci-lint · Comprehensive Go linting"
        args: ["--fix", "--timeout=5m"]

  # Security scanning for secrets
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.4
    hooks:
      - id: gitleaks
        name: "🔒 gitleaks · Detect hardcoded secrets"
  - repo: https://github.com/trufflesecurity/truffleHog
    rev: v3.88.29
    hooks:
      - id: trufflehog
        name: "🔒 trufflehog · Detect hardcoded secrets"

  # License header check
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.5
    hooks:
      - id: insert-license
        name: "©️ insert-license · Ensure license headers"
        files: '\.go$'
        args:
          - --license-filepath
          - LICENSE.header
          - --comment-style
          - //
        exclude: |
          (?x)^(
            .*\.pb\.go$|
            .*_gen\.go$|
            vendor/.*
          )$

  # Conventional commits validation
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.4.0
    hooks:
      - id: conventional-pre-commit
        name: "📝 conventional-pre-commit · Validate commit messages"
        stages: [commit-msg]
        args: ["--strict", "--force-scope"]

  # Documentation linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.41.0
    hooks:
      - id: markdownlint
        name: "📖 markdownlint · Ensure consistent markdown"
        args: ["--fix"]

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: "📏 yamllint · Validate YAML files"
        args: ["--strict", "-c", ".yamllint.yaml"]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: "🐚 shellcheck · Validate Shell Files for Best Practices"
  - repo: https://github.com/openstack/bashate
    rev: 2.1.1
    hooks:
      - id: bashate
        name: "🐚 bashate · Validate Shell Files for Best Practices"

  # GitHub Actions linting
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.7
    hooks:
      - id: actionlint
        name: "✅ actionlint · Validate GitHub Actions files for Best Practices"
